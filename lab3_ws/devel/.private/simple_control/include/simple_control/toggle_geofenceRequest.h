// Generated by gencpp from file simple_control/toggle_geofenceRequest.msg
// DO NOT EDIT!


#ifndef SIMPLE_CONTROL_MESSAGE_TOGGLE_GEOFENCEREQUEST_H
#define SIMPLE_CONTROL_MESSAGE_TOGGLE_GEOFENCEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simple_control
{
template <class ContainerAllocator>
struct toggle_geofenceRequest_
{
  typedef toggle_geofenceRequest_<ContainerAllocator> Type;

  toggle_geofenceRequest_()
    : geofence_on(false)  {
    }
  toggle_geofenceRequest_(const ContainerAllocator& _alloc)
    : geofence_on(false)  {
  (void)_alloc;
    }



   typedef uint8_t _geofence_on_type;
  _geofence_on_type geofence_on;





  typedef boost::shared_ptr< ::simple_control::toggle_geofenceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simple_control::toggle_geofenceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct toggle_geofenceRequest_

typedef ::simple_control::toggle_geofenceRequest_<std::allocator<void> > toggle_geofenceRequest;

typedef boost::shared_ptr< ::simple_control::toggle_geofenceRequest > toggle_geofenceRequestPtr;
typedef boost::shared_ptr< ::simple_control::toggle_geofenceRequest const> toggle_geofenceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simple_control::toggle_geofenceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simple_control::toggle_geofenceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simple_control::toggle_geofenceRequest_<ContainerAllocator1> & lhs, const ::simple_control::toggle_geofenceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.geofence_on == rhs.geofence_on;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simple_control::toggle_geofenceRequest_<ContainerAllocator1> & lhs, const ::simple_control::toggle_geofenceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simple_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::simple_control::toggle_geofenceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simple_control::toggle_geofenceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simple_control::toggle_geofenceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simple_control::toggle_geofenceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simple_control::toggle_geofenceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simple_control::toggle_geofenceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simple_control::toggle_geofenceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33283065de6845546e39497d7e980b9d";
  }

  static const char* value(const ::simple_control::toggle_geofenceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33283065de684554ULL;
  static const uint64_t static_value2 = 0x6e39497d7e980b9dULL;
};

template<class ContainerAllocator>
struct DataType< ::simple_control::toggle_geofenceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simple_control/toggle_geofenceRequest";
  }

  static const char* value(const ::simple_control::toggle_geofenceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simple_control::toggle_geofenceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool geofence_on\n"
;
  }

  static const char* value(const ::simple_control::toggle_geofenceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simple_control::toggle_geofenceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.geofence_on);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct toggle_geofenceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simple_control::toggle_geofenceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simple_control::toggle_geofenceRequest_<ContainerAllocator>& v)
  {
    s << indent << "geofence_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.geofence_on);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMPLE_CONTROL_MESSAGE_TOGGLE_GEOFENCEREQUEST_H
